{"version":3,"sources":["Components/AddItemForm/AddItemForm.tsx","Components/EditableSpan/EditableSpan.tsx","Todolist.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AddItemForm","props","useState","inputTextValue","setInputTextValue","error","setError","onClickPressHandler","code","trim","addItem","TextField","variant","size","value","onChange","e","currentTarget","onKeyPress","label","helperText","style","marginBottom","IconButton","color","onClick","AddCircleTwoTone","EditableSpan","title","setTitle","inputActive","setInputActive","titleForToDolist","changedTitle","opacityAndBoldForTasks","header","fontWeight","fontSize","completed","opacity","onBlur","key","autoFocus","Typography","onDoubleClick","Todolist","callbackFilterHandler","fil","filterTask","id","removeToDoList","DeleteForeverTwoTone","changeToDoListTitle","addTask","filter","Button","margin","List","task","map","mf","ListItem","padding","removeTask","DeleteTwoTone","Checkbox","event","changeCheckbox","checked","callbackChangeStatus","isDone","term","changedTitleTask","App","toDoList_1","v1","toDoList_2","toDoLists","setToDoLists","tasks","setTasks","taskID","toDoListId","ft","newTask","mt","filterId","taskId","m","toDolistComponents","sito","f","Grid","item","Paper","elevation","className","AppBar","position","Toolbar","justifyContent","edge","Menu","Container","maxWidth","container","toDoListID","spacing","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f96e042e.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport {FilterProps} from '../../App';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddCircleTwoTone} from '@material-ui/icons';\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (inputTextValue: string) => void\r\n    filter: FilterProps\r\n}\r\n\r\nexport const AddItemForm = (props: AddItemFormPropsType) => {\r\n    let [inputTextValue, setInputTextValue] = useState('')\r\n    let [error, setError] = useState(false)\r\n\r\n    const onChangeHandler = (value: string) => {\r\n        setInputTextValue(value)\r\n        setError(false)\r\n    }\r\n\r\n    const onClickPressHandler = (code: string) => {\r\n        if (code === \"Enter\" || code === \"NumpadEnter\") {\r\n            if (inputTextValue.trim() !== '') {\r\n                props.addItem(inputTextValue)\r\n                setInputTextValue('')\r\n            } else {\r\n                setError(true)\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={'outlined'}\r\n                size={'small'}\r\n                value={inputTextValue}\r\n                onChange={(e) => onChangeHandler(e.currentTarget.value)}\r\n                onKeyPress={(e) => onClickPressHandler(e.code)}\r\n                label={'Title'}\r\n                error={error}\r\n                helperText={error && \"Title is a must\"}\r\n                style={{marginBottom: \"10px\"}}\r\n                />\r\n            <IconButton color={'primary'} onClick={() => onClickPressHandler(\"Enter\")}>\r\n                <AddCircleTwoTone/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {TextField, Typography} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    completed: boolean\r\n    changedTitle: (title: string) => void\r\n    header: boolean\r\n}\r\n\r\nexport const EditableSpan = (props: EditableSpanPropsType) => {\r\n    let [title, setTitle] = useState(props.title)\r\n    let [inputActive, setInputActive] = useState(false)\r\n\r\n    const inputActiveOn = () => {\r\n        setInputActive(true)\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const titleForToDolist = () => {\r\n        setInputActive(false)\r\n        props.changedTitle(title)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') titleForToDolist()\r\n    }\r\n\r\n    const opacityAndBoldForTasks: any = props.header ? {fontWeight: 'bold', fontSize: 'larger'} : (props.completed ? {opacity: 0.35} : {opacity: 1})\r\n\r\n    return (\r\n        <div>\r\n            {inputActive\r\n                ? <TextField\r\n                    value={title}\r\n                    onChange={onChangeHandler}\r\n                    onBlur={titleForToDolist}\r\n                    onKeyPress={onKeyPressHandler}\r\n                    autoFocus\r\n                />\r\n                : <Typography onDoubleClick={inputActiveOn} style={opacityAndBoldForTasks}>\r\n                    {props.title}\r\n                </Typography>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}","import {Button, Checkbox, IconButton, List, ListItem} from '@material-ui/core';\r\nimport React, {ChangeEvent} from 'react';\r\nimport {FilterProps} from './App';\r\nimport {AddItemForm} from './Components/AddItemForm/AddItemForm';\r\nimport {EditableSpan} from './Components/EditableSpan/EditableSpan';\r\nimport {DeleteForeverTwoTone, DeleteTwoTone} from '@material-ui/icons';\r\n\r\ntype TaskPropsType = {\r\n    id: string\r\n    term: string\r\n    isDone: boolean\r\n}\r\n\r\ntype TodolistPropsType = {\r\n    id: string\r\n    title: string\r\n    task: TaskPropsType[]\r\n    filter: FilterProps\r\n    removeTask: (taskID: string, toDoListId: string) => void\r\n    filterTask: (filterId: FilterProps, toDoListId: string) => void\r\n    addTask: (title: string, toDoListId: string) => void\r\n    changeCheckbox: (id: string, checked: boolean, toDoListId: string) => void\r\n    removeToDoList: (toDoListId: string) => void\r\n    changedTitleTask: (title: string, toDoListId: string, taskId: string) => void\r\n    changeToDoListTitle: (title: string, toDoListId: string) => void\r\n}\r\n\r\nexport const Todolist = (props: TodolistPropsType) => {\r\n    const removeTaskHandler = (id: string) => {\r\n        props.removeTask(id, props.id)\r\n    }\r\n\r\n    const callbackFilterHandler = (fil: FilterProps) => {\r\n        props.filterTask(fil, props.id)\r\n    }\r\n\r\n    const callbackChangeStatus = (id: string, event: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeCheckbox(id, event.currentTarget.checked, props.id)\r\n    }\r\n\r\n    const removeToDoList = () => {\r\n        props.removeToDoList(props.id)\r\n    }\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n\r\n    const changeToDoListTitle = (title: string) => {\r\n        props.changeToDoListTitle(title, props.id)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <IconButton onClick={removeToDoList}>\r\n                <DeleteForeverTwoTone color={'secondary'}/>\r\n            </IconButton>\r\n            <h3><EditableSpan changedTitle={changeToDoListTitle} title={props.title} completed={false} header={true}/></h3>\r\n            <AddItemForm addItem={addTask} filter={props.filter}/>\r\n            <div>\r\n                <Button variant={'contained'} color={props.filter === 'All' ? 'primary' : 'inherit'} size={'small'}\r\n                        onClick={() => callbackFilterHandler('All')}>All</Button>\r\n                <Button variant={'contained'} color={props.filter === 'Active' ? 'primary' : 'inherit'} size={'small'}\r\n                        onClick={() => callbackFilterHandler('Active')} style={{margin: \"0px 5px\"}}>Active</Button>\r\n                <Button variant={'contained'} color={props.filter === 'Completed' ? 'primary' : 'inherit'}\r\n                        size={'small'} onClick={() => callbackFilterHandler('Completed')}>Completed</Button>\r\n            </div>\r\n            <List>\r\n                {props.task.map(mf => {\r\n                        const changedTitleTask = (title: string) => {\r\n                            props.changedTitleTask(title, props.id, mf.id)\r\n                        }\r\n\r\n                        return (\r\n                            <ListItem key={mf.id} style={{padding: \"0px\"}}>\r\n                                    <IconButton onClick={() => removeTaskHandler(mf.id)} size={'small'}>\r\n                                        <DeleteTwoTone color={'secondary'}/>\r\n                                    </IconButton>\r\n                                    <Checkbox size={'small'} color={'primary'} onChange={(event) => callbackChangeStatus(mf.id, event)} checked={mf.isDone}/>\r\n                                    <EditableSpan title={mf.term} changedTitle={changedTitleTask} completed={mf.isDone} header={false}/>\r\n                            </ListItem>\r\n                        )\r\n                    }\r\n                )\r\n                }\r\n            </List>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\nimport {v1} from 'uuid';\nimport {AddItemForm} from './Components/AddItemForm/AddItemForm';\nimport {Todolist} from './Todolist';\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\nimport {Menu} from '@material-ui/icons';\n\n\nexport type FilterProps = 'All' | 'Active' | 'Completed'\n\nexport type toDoListsPropsType = {\n    id: string\n    title: string\n    filter: FilterProps\n}\n\nexport type taskPropsType = {\n    id: string\n    term: string\n    isDone: boolean\n}\n\nexport type tasksPropsType = {\n    [key: string]: taskPropsType[]\n}\n\nfunction App() {\n\n    const toDoList_1 = v1()\n    const toDoList_2 = v1()\n\n    let [toDoLists, setToDoLists] = useState<toDoListsPropsType[]>([\n        {id: toDoList_1, title: 'What to learn', filter: 'All'},\n        {id: toDoList_2, title: 'What to buy', filter: 'All'}\n    ])\n\n    const [tasks, setTasks] = useState<tasksPropsType>({\n        [toDoList_1]: [\n            {id: v1(), term: 'HTML&CSS', isDone: true},\n            {id: v1(), term: 'JS', isDone: true},\n            {id: v1(), term: 'React', isDone: false},\n            {id: v1(), term: 'Redux', isDone: false},\n            {id: v1(), term: 'Node', isDone: false},\n            {id: v1(), term: 'React Native', isDone: false}\n        ],\n        [toDoList_2]: [\n            {id: v1(), term: 'Bread', isDone: false},\n            {id: v1(), term: 'Milk', isDone: true},\n            {id: v1(), term: 'Soap', isDone: false}\n        ]\n    })\n\n    const removeTask = (taskID: string, toDoListId: string) => {\n        tasks[toDoListId] = tasks[toDoListId].filter(ft => ft.id !== taskID)\n        setTasks({...tasks})\n    }\n\n    const addTask = (title: string, toDoListId: string) => {\n        const newTask = {id: v1(), term: title.trim(), isDone: false}\n        tasks[toDoListId] = [newTask, ...tasks[toDoListId]]\n        setTasks({...tasks})\n    }\n\n    const changeCheckbox = (id: string, checked: boolean, toDoListId: string) => {\n        tasks[toDoListId] = tasks[toDoListId].map(mt => mt.id === id ? {...mt, isDone: checked} : mt)\n        setTasks({...tasks})\n    }\n\n    const filterTask = (filterId: FilterProps, toDoListId: string) => {\n        setToDoLists(toDoLists.map(mt => mt.id === toDoListId ? {...mt, filter: filterId} : mt))\n    }\n\n    const removeToDoList = (toDoListId: string) => {\n        setToDoLists(toDoLists.filter(ft => ft.id !== toDoListId))\n        delete tasks[toDoListId]\n    }\n\n    const addToDoList = (title: string) => {\n        const toDoListID = v1()\n        setToDoLists([...toDoLists, {id: toDoListID, title, filter: 'All'}])\n        setTasks({...tasks, [toDoListID]: []})\n    }\n\n    const changedTitleTask = (title: string, toDoListId: string, taskId: string) => {\n        tasks[toDoListId] = tasks[toDoListId].map(m => m.id === taskId ? {...m, term: title} : m)\n        setTasks({...tasks})\n    }\n\n    const changeToDoListTitle = (title: string, toDoListId: string) => {\n        setToDoLists(toDoLists.map(m => m.id === toDoListId ? {...m, title} : m))\n    }\n\n    const toDolistComponents = toDoLists.map(mt => {\n        let sito = tasks[mt.id]\n        if (mt.filter === 'Completed') {\n            sito = tasks[mt.id].filter(f => f.isDone)\n        }\n        if (mt.filter === 'Active') {\n            sito = tasks[mt.id].filter(f => !f.isDone)\n        }\n\n        return (\n            <Grid item key={mt.id}>\n                <Paper elevation={4} style={{padding: \"15px\"}}>\n                    <Todolist\n                        id={mt.id}\n                        title={mt.title}\n                        task={sito}\n                        filter={mt.filter}\n                        removeTask={removeTask}\n                        filterTask={filterTask}\n                        addTask={addTask}\n                        changeCheckbox={changeCheckbox}\n                        removeToDoList={removeToDoList}\n                        changedTitleTask={changedTitleTask}\n                        changeToDoListTitle={changeToDoListTitle}\n                    />\n                </Paper>\n            </Grid>\n        )\n    })\n\n    return (\n        <div className=\"App\">\n            <AppBar position=\"static\">\n                <Toolbar style={{justifyContent: 'space-between'}}>\n                    <IconButton edge={'start'} color={'inherit'}>\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant={'h6'}>\n                        Todolists\n                    </Typography>\n                    <Button variant={'outlined'} color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n            <Container maxWidth={'xl'}>\n                <Grid container style={{justifyContent: 'center', margin: \"20px\"}}>\n                    <AddItemForm addItem={addToDoList} filter={'All'}/>\n                </Grid>\n                <Grid container spacing={3} style={{justifyContent: 'center'}}>\n                    {toDolistComponents}\n                </Grid>\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}