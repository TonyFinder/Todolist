{"version":3,"sources":["Components/Button.module.css","Components/Input.module.css","Components/AddItemForm/AddItemForm.module.css","Components/EditableSpan/EditableSpan.module.css","Todolist.module.css","Components/Button.tsx","Components/Input.tsx","Components/AddItemForm/AddItemForm.tsx","Components/EditableSpan/EditableSpan.tsx","Todolist.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Button","props","buttonColor","filter","title","styles","color","className","onClick","callback","Input","errorClass","error","style","borderInput","value","inputTextValue","onChange","event","setInputTextValue","currentTarget","setError","onKeyPress","key","AddItemForm","useState","onClickPressHandler","trim","addItem","redText","EditableSpan","setTitle","inputActive","setInputActive","completedTaskHandler","completed","completedTasks","titleForToDolist","changedTitle","e","onBlur","autoFocus","onDoubleClick","Todolist","callbackFilterHandler","fil","filterTask","id","removeToDoList","changeToDoListTitle","addTask","task","map","mf","blocks","removeTask","changeCheckbox","checked","callbackChangeStatus","type","isDone","term","changedTitleTask","App","toDoList_1","v1","toDoList_2","toDoLists","setToDoLists","tasks","setTasks","taskID","toDoListId","ft","newTask","mt","filterId","taskId","m","toDolistComponents","sito","f","toDoListID","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.40fd7f16.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"color\":\"Button_color__3MUkP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"borderInput\":\"Input_borderInput__Nl2lh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"redText\":\"AddItemForm_redText__1pIhA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"completedTasks\":\"EditableSpan_completedTasks__3mBaX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"redText\":\"Todolist_redText__2Tl7S\",\"completedTasks\":\"Todolist_completedTasks__5bsqv\",\"blocks\":\"Todolist_blocks__1vjtl\"};","import { FilterProps } from '../App'\r\nimport styles from './Button.module.css'\r\n\r\ntype ButtonType = {\r\n    title: string\r\n    callback: () => void\r\n    filter: FilterProps\r\n}\r\n\r\nexport const Button = (props: ButtonType) => {\r\n    const buttonClickHandler = () => props.callback()\r\n\r\n    const buttonColor = props.filter === props.title ? styles.color : ''\r\n\r\n    return (\r\n        <button className={buttonColor} onClick={buttonClickHandler}>{props.title}</button>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent} from 'react';\r\nimport style from './Input.module.css'\r\n\r\ntype InputPropsType = {\r\n    inputTextValue: string\r\n    setInputTextValue: (inputTextValue: string) => void\r\n    callback: () => void\r\n    setError: (error: boolean) => void\r\n    error: boolean\r\n}\r\n\r\nexport const Input = (props: InputPropsType) => {\r\n\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        props.setInputTextValue(event.currentTarget.value)\r\n        props.setError(false)\r\n\r\n    }\r\n\r\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') props.callback()\r\n    }\r\n\r\n    const errorClass = props.error ? style.borderInput : ''\r\n\r\n    return (\r\n        <input className={errorClass} value={props.inputTextValue} onChange={onChangeHandler} onKeyPress={onKeyPressHandler}/>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { FilterProps } from '../../App';\r\nimport { Button } from '../Button';\r\nimport { Input } from '../Input';\r\nimport style from './AddItemForm.module.css'\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (inputTextValue: string) => void\r\n    filter: FilterProps\r\n}\r\n\r\nexport const AddItemForm = (props: AddItemFormPropsType) => {\r\n    let [inputTextValue, setInputTextValue] = useState('')\r\n    let [error, setError] = useState(false)\r\n\r\n    const onClickPressHandler = () => {\r\n        if (inputTextValue.trim() !== '') {\r\n            props.addItem(inputTextValue)\r\n            setInputTextValue('')\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Input inputTextValue={inputTextValue} setInputTextValue={setInputTextValue}\r\n                   callback={onClickPressHandler} setError={setError} error={error}/>\r\n            <Button title={'+'} callback={onClickPressHandler} filter={props.filter}/>\r\n            {error && <div className={style.redText}>Title is required</div>}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport style from './EditableSpan.module.css'\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    completed: boolean\r\n    changedTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = (props: EditableSpanPropsType) => {\r\n    let [title, setTitle] = useState(props.title)\r\n    let [inputActive, setInputActive] = useState(false)\r\n\r\n    const completedTaskHandler = props.completed ? style.completedTasks : ''\r\n    const inputActiveOn = () => {\r\n        setInputActive(true)\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const titleForToDolist = () => {\r\n        setInputActive(false)\r\n        props.changedTitle(title)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") titleForToDolist()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {inputActive\r\n                ? <input\r\n                    value={title}\r\n                    onChange={onChangeHandler}\r\n                    onBlur={titleForToDolist}\r\n                    onKeyPress={onKeyPressHandler}\r\n                    autoFocus/>\r\n                : <span\r\n                    className={completedTaskHandler}\r\n                    onDoubleClick={inputActiveOn}\r\n                >{props.title}</span>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {FilterProps} from './App';\r\nimport {AddItemForm} from './Components/AddItemForm/AddItemForm';\r\nimport {Button} from './Components/Button';\r\nimport {EditableSpan} from './Components/EditableSpan/EditableSpan';\r\nimport style from './Todolist.module.css'\r\n\r\ntype TaskPropsType = {\r\n    id: string\r\n    term: string\r\n    isDone: boolean\r\n}\r\n\r\ntype TodolistPropsType = {\r\n    id: string\r\n    title: string\r\n    task: TaskPropsType[]\r\n    filter: FilterProps\r\n    removeTask: (taskID: string, toDoListId: string) => void\r\n    filterTask: (filterId: FilterProps, toDoListId: string) => void\r\n    addTask: (title: string, toDoListId: string) => void\r\n    changeCheckbox: (id: string, checked: boolean, toDoListId: string) => void\r\n    removeToDoList: (toDoListId: string) => void\r\n    changedTitleTask: (title: string, toDoListId: string, taskId: string) => void\r\n    changeToDoListTitle: (title: string, toDoListId: string) => void\r\n}\r\n\r\nexport const Todolist = (props: TodolistPropsType) => {\r\n    const removeTaskHandler = (id: string) => {\r\n        props.removeTask(id, props.id)\r\n    }\r\n\r\n    const callbackFilterHandler = (fil: FilterProps) => {\r\n        props.filterTask(fil, props.id)\r\n    }\r\n\r\n    const callbackChangeStatus = (id: string, event: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeCheckbox(id, event.currentTarget.checked, props.id)\r\n    }\r\n\r\n    const removeToDoList = () => {\r\n        props.removeToDoList(props.id)\r\n    }\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n\r\n    const changeToDoListTitle = (title: string) => {\r\n        props.changeToDoListTitle(title, props.id)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Button title={'x'} callback={removeToDoList} filter={props.filter}/>\r\n            <h3><EditableSpan changedTitle={changeToDoListTitle} title={props.title} completed={false}/></h3>\r\n            <AddItemForm addItem={addTask} filter={props.filter}/>\r\n            <div>\r\n                <Button title={'All'} callback={() => callbackFilterHandler('All')} filter={props.filter}/>\r\n                <Button title={'Active'} callback={() => callbackFilterHandler('Active')} filter={props.filter}/>\r\n                <Button title={'Completed'} callback={() => callbackFilterHandler('Completed')} filter={props.filter}/>\r\n            </div>\r\n            <ul>\r\n                {props.task.map(mf => {\r\n                        const changedTitleTask = (title: string) => {\r\n                            props.changedTitleTask(title, props.id, mf.id)\r\n                        }\r\n\r\n                        return (\r\n                            <li key={mf.id}>\r\n                                <div className={style.blocks}>\r\n                                    <Button title={'x'} callback={() => removeTaskHandler(mf.id)} filter={props.filter}/>\r\n                                    <input onChange={(event) => callbackChangeStatus(mf.id, event)} type=\"checkbox\"\r\n                                           checked={mf.isDone}/>\r\n                                    <EditableSpan title={mf.term} changedTitle={changedTitleTask} completed={mf.isDone}/>\r\n                                </div>\r\n                            </li>\r\n                        )\r\n                    }\r\n                )\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\nimport {v1} from 'uuid';\nimport './App.css';\nimport {AddItemForm} from './Components/AddItemForm/AddItemForm';\nimport {Todolist} from './Todolist';\n\nexport type FilterProps = 'All' | 'Active' | 'Completed'\n\nexport type toDoListsPropsType = {\n    id: string\n    title: string\n    filter: FilterProps\n}\n\nexport type taskPropsType = {\n    id: string\n    term: string\n    isDone: boolean\n}\n\nexport type tasksPropsType = {\n    [key: string]: taskPropsType[]\n}\n\nfunction App() {\n\n    const toDoList_1 = v1()\n    const toDoList_2 = v1()\n\n    let [toDoLists, setToDoLists] = useState<toDoListsPropsType[]>([\n        {id: toDoList_1, title: 'What to learn', filter: 'All'},\n        {id: toDoList_2, title: 'What to buy', filter: 'All'}\n    ])\n\n    const [tasks, setTasks] = useState<tasksPropsType>({\n        [toDoList_1]: [\n            {id: v1(), term: 'HTML&CSS', isDone: true},\n            {id: v1(), term: 'JS', isDone: true},\n            {id: v1(), term: 'React', isDone: false},\n            {id: v1(), term: 'HTML&CSS', isDone: true},\n            {id: v1(), term: 'JS', isDone: true},\n            {id: v1(), term: 'React', isDone: false}\n        ],\n        [toDoList_2]: [\n            {id: v1(), term: 'Bread', isDone: false},\n            {id: v1(), term: 'Milk', isDone: true},\n            {id: v1(), term: 'Soap', isDone: false}\n        ]\n    })\n\n    const removeTask = (taskID: string, toDoListId: string) => {\n        tasks[toDoListId] = tasks[toDoListId].filter(ft => ft.id !== taskID)\n        setTasks({...tasks})\n    }\n\n    const addTask = (title: string, toDoListId: string) => {\n        const newTask = {id: v1(), term: title.trim(), isDone: false}\n        tasks[toDoListId] = [newTask, ...tasks[toDoListId]]\n        setTasks({...tasks})\n    }\n\n    const changeCheckbox = (id: string, checked: boolean, toDoListId: string) => {\n        tasks[toDoListId] = tasks[toDoListId].map(mt => mt.id === id ? {...mt, isDone: checked} : mt)\n        setTasks({...tasks})\n    }\n\n    const filterTask = (filterId: FilterProps, toDoListId: string) => {\n        setToDoLists(toDoLists.map(mt => mt.id === toDoListId ? {...mt, filter: filterId} : mt))\n    }\n\n    const removeToDoList = (toDoListId: string) => {\n        setToDoLists(toDoLists.filter(ft => ft.id !== toDoListId))\n        delete tasks[toDoListId]\n    }\n\n    const addToDoList = (title: string) => {\n        const toDoListID = v1()\n        setToDoLists([...toDoLists, {id: toDoListID, title, filter: 'All'}])\n        setTasks({...tasks, [toDoListID]: []})\n    }\n\n    const changedTitleTask = (title: string, toDoListId: string, taskId: string) => {\n        tasks[toDoListId] = tasks[toDoListId].map(m => m.id === taskId ? {...m, term: title} : m)\n        setTasks({...tasks})\n    }\n\n    const changeToDoListTitle = (title: string, toDoListId: string) => {\n        setToDoLists(toDoLists.map(m => m.id === toDoListId ? {...m, title} : m))\n    }\n\n    const toDolistComponents = toDoLists.map(mt => {\n        let sito = tasks[mt.id]\n        if (mt.filter === 'Completed') {\n            sito = tasks[mt.id].filter(f => f.isDone)\n        }\n        if (mt.filter === 'Active') {\n            sito = tasks[mt.id].filter(f => !f.isDone)\n        }\n\n        return (\n            <Todolist\n                key={mt.id}\n                id={mt.id}\n                title={mt.title}\n                task={sito}\n                filter={mt.filter}\n                removeTask={removeTask}\n                filterTask={filterTask}\n                addTask={addTask}\n                changeCheckbox={changeCheckbox}\n                removeToDoList={removeToDoList}\n                changedTitleTask={changedTitleTask}\n                changeToDoListTitle={changeToDoListTitle}\n            />\n        )\n    })\n\n    return (\n        <div className=\"App\">\n            <AddItemForm addItem={addToDoList} filter={'All'}/>\n            {toDolistComponents}\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}