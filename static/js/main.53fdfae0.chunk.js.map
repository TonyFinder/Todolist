{"version":3,"sources":["utils/enums.ts","reportWebVitals.ts","api/api.ts","utils/common-commands.ts","features/reducer-tasks.ts","features/auth-reducer.ts","features/app-reducer.ts","features/reducer-todolist.ts","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/Todolists.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","images/not_found_404.png","features/Error404/Error404.tsx","app/App.tsx","index.tsx","features/Error404/Error404.module.css"],"names":["TaskStatuses","TaskPriorities","ApiResultCode","RequestStatusType","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","todolistId","put","delete","tasksAPI","taskId","updateObject","authAPI","data","handlerForAppErrorInThen","dispatch","messages","changeAppErrorValue","length","initialState","changeTaskEntityStatusAC","status","type","updateTaskTC","getState","changeAppLoadingStatus","loading","task","tasks","find","t","id","console","warn","model","description","deadline","startDate","priority","res","resultCode","success","updateTaskAC","catch","err","message","finally","succeeded","isLoggedIn","setLoggedIn","loadingStatus","idle","errorServer","isInitialized","changeTodolistEntityStatusAC","entityStatus","clearTodolistsAC","setTodolistsTC","todolists","todos","forEach","todo","setTasksAC","items","rootReducer","combineReducers","action","map","filter","todolist","mt","filterId","m","ft","newTasks","newState","app","state","auth","store","createStore","applyMiddleware","thunk","useCustomSelector","useSelector","window","AddItemForm","React","memo","disable","addItem","log","useState","inputTextValue","setInputTextValue","error","setError","onChangeHandler","useCallback","value","onClickPressHandler","code","trim","TextField","variant","size","onChange","e","currentTarget","onKeyPress","label","helperText","style","marginBottom","disabled","IconButton","color","onClick","EditableSpan","header","completed","changedTitle","titleMain","setTitle","inputActive","setInputActive","inputActiveOn","titleForToDolist","onKeyPressHandler","key","opacityAndBoldForTasks","fontWeight","fontSize","opacity","onBlur","autoFocus","Typography","onDoubleClick","Task","f","useDispatch","changeTaskTitle","changeTaskCheckbox","event","Completed","New","removeTask","removeTaskAC","removeTaskTC","ListItem","padding","Checkbox","checked","Todolist","demo","useEffect","addTask","addTaskAC","item","addTaskTC","filterTasks","filterTaskAC","removeTodolist","removeTodolistAC","removeTodolistTC","changeTodolistTitle","changeTodolistTitleAC","changeTodolistTitleTC","Button","margin","List","mf","Todolists","navigate","useNavigate","addTodolist","addTodolistTC","Container","maxWidth","Grid","container","justifyContent","spacing","Paper","elevation","Alert","props","ref","ErrorSnackbar","handleClose","reason","Snackbar","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","to","FormControl","FormLabel","href","target","rel","handleSubmit","FormGroup","getFieldProps","touched","FormControlLabel","control","Error404","className","styles","image","src","not_found","alt","App","logoutHandler","AppBar","position","Toolbar","display","edge","LinearProgress","path","element","alignItems","marginTop","CircularProgress","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.53fdfae0.chunk.js","sourcesContent":["export enum TaskStatuses {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\nexport enum TaskPriorities {\r\n    Low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}\r\nexport enum ApiResultCode {\r\n    success,\r\n    error\r\n}\r\nexport enum RequestStatusType {\r\n    idle,\r\n    loading,\r\n    succeeded,\r\n    failed\r\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from 'axios';\r\nimport {TaskUpdateDomainType} from '../features/reducer-tasks';\r\nimport {TaskPriorities, TaskStatuses} from '../utils/enums';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'api-key': '7c15e34d-028e-4653-86ec-6c53c32699db'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<any, BaseResponseType<{item: TodolistType}>, {title: string}>('todo-lists', {title})\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<any, BaseResponseType, {title: string}>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<any, BaseResponseType, {}>(`todo-lists/${todolistId}`)\r\n    }\r\n}\r\nexport const tasksAPI = {\r\n    getTasks(todolistId: string) {\r\n        return instance.get<TasksResponseType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<any, BaseResponseType<{item: TaskType}>, {title: string}>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, updateObject: TaskUpdateDomainType) {\r\n        return instance.put<any, BaseResponseType<{item: TaskType}>, TaskUpdateDomainType>(`todo-lists/${todolistId}/tasks/${taskId}`, updateObject)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<any, BaseResponseType, {}>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    }\r\n}\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<any, BaseResponseType<MeResponseDataType>, {}>('auth/me')\r\n    },\r\n    login(data: LoginRequestType) {\r\n        return instance.post<any, BaseResponseType<{userId: number}>, LoginRequestType>(`auth/login`, {...data})\r\n    },\r\n    logout() {\r\n        return instance.delete<any, BaseResponseType, {}>(`auth/login`)\r\n    }\r\n}\r\n\r\n\r\n// types\r\nexport type TodolistType = {\r\n    addedDate: string\r\n    id: string\r\n    order: number\r\n    title: string\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todolistId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type TaskUpdateType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype BaseResponseType<T = {}> = {\r\n    data: {\r\n        resultCode: number\r\n        messages: string[]\r\n        fieldsErrors: []\r\n        data: T\r\n    }\r\n}\r\ntype TasksResponseType = {\r\n    items: TaskType[]\r\n    error: string\r\n    totalCount: number\r\n}\r\nexport type LoginRequestType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}","import { Dispatch } from 'redux';\r\nimport {AppActionType, changeAppErrorValue} from '../features/app-reducer';\r\n\r\nexport const handlerForAppErrorInThen = (dispatch: Dispatch<AppActionType>, messages: string[]) => {\r\n    dispatch(changeAppErrorValue(messages.length ? messages[0] : \"Some error is occurred\"))\r\n}","import {AddTodolistAT, RemoveTodolistAT, SetTodolistsAT} from './reducer-todolist';\r\nimport {tasksAPI, TaskType} from '../api/api';\r\nimport {AppStateRootType, AppThunk} from '../app/store';\r\nimport {AppActionType, changeAppErrorValue, changeAppLoadingStatus} from './app-reducer';\r\nimport {AxiosError} from 'axios';\r\nimport {handlerForAppErrorInThen} from '../utils/common-commands';\r\nimport {ApiResultCode, RequestStatusType, TaskPriorities, TaskStatuses} from '../utils/enums';\r\n\r\nlet initialState: TasksPropsType = {}\r\n\r\nexport const tasksReducer = (tasks: TasksPropsType = initialState, action: TasksActionTypes): TasksPropsType => {\r\n    switch (action.type) {\r\n        case 'SET-TODOLISTS':\r\n            let newTasks = {...tasks}\r\n            action.todolists.forEach(t => {\r\n                newTasks[t.id] = []\r\n            })\r\n            return newTasks\r\n        case 'SET-TASKS':\r\n            return {...tasks, [action.todolistId]: action.tasks.map(task => ({...task, entityStatus: RequestStatusType.idle}))}\r\n        case 'ADD-TASK':\r\n            return {...tasks, [action.todolistId]: [{...action.task, entityStatus: RequestStatusType.idle}, ...tasks[action.todolistId]]}\r\n        case 'UPDATE-TASK':\r\n            return {...tasks,\r\n                [action.todolistId]: tasks[action.todolistId].map(t => t.id === action.taskId ? {...t, ...action.updateObject} : t)}\r\n        case 'REMOVE-TASK':\r\n            return {...tasks, [action.todolistId]: tasks[action.todolistId].filter(task => task.id !== action.taskId)}\r\n        case 'CHANGE-TASK-ENTITY-STATUS':\r\n            return {...tasks, [action.todolistId]: tasks[action.todolistId]\r\n                    .map(task => task.id === action.taskId ? {...task, entityStatus: action.status} : task)}\r\n        case 'ADD-TODOLIST':\r\n            return {[action.todolist.id]: [], ...tasks}\r\n        case 'REMOVE-TODOLIST':\r\n            let newState = {...tasks}\r\n            delete newState[action.todolistId]\r\n            return newState\r\n        case 'CLEAR-TASKS':\r\n            return {}\r\n        default:\r\n            return tasks\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setTasksAC = (todolistId: string, tasks: TaskType[]) => ({type: 'SET-TASKS', todolistId, tasks} as const)\r\nexport const addTaskAC = (todolistId: string, task: TaskType) => ({type: 'ADD-TASK', todolistId, task} as const)\r\nexport const updateTaskAC = (taskId: string, todolistId: string, updateObject: TaskUpdateDomainType) => (\r\n    {type: 'UPDATE-TASK', taskId, todolistId, updateObject} as const)\r\nexport const changeTaskEntityStatusAC = (taskId: string, todolistId: string, status: RequestStatusType) => (\r\n    {type: 'CHANGE-TASK-ENTITY-STATUS', taskId, todolistId, status} as const)\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const clearTasksAC = () => ({type: 'CLEAR-TASKS'} as const)\r\n\r\n// thunks\r\nexport const setTasksTC = (todolistId: string): AppThunk => dispatch => {\r\n    dispatch(changeAppLoadingStatus(RequestStatusType.loading))\r\n    tasksAPI.getTasks(todolistId)\r\n        .then(res => dispatch(setTasksAC(todolistId, res.data.items)))\r\n        .catch((err: AxiosError) => dispatch(changeAppErrorValue(err.message)))\r\n        .finally(()=> dispatch(changeAppLoadingStatus(RequestStatusType.succeeded)))\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string): AppThunk => dispatch => {\r\n    dispatch(changeAppLoadingStatus(RequestStatusType.loading))\r\n    tasksAPI.createTask(todolistId, title)\r\n        .then(res => res.data.resultCode === ApiResultCode.success\r\n                ? dispatch(addTaskAC(todolistId, res.data.data.item))\r\n                : handlerForAppErrorInThen(dispatch, res.data.messages))\r\n        .catch((err: AxiosError) => dispatch(changeAppErrorValue(err.message)))\r\n        .finally(()=> dispatch(changeAppLoadingStatus(RequestStatusType.succeeded)))\r\n}\r\nexport const updateTaskTC = (todolistId: string, taskId: string, updateObject: TaskUpdateDomainType): AppThunk => (dispatch, getState: () => AppStateRootType) => {\r\n    dispatch(changeAppLoadingStatus(RequestStatusType.loading))\r\n    dispatch(changeTaskEntityStatusAC(taskId, todolistId, RequestStatusType.loading))\r\n    let task = getState().tasks[todolistId].find(t => t.id === taskId)\r\n    if (!task) return console.warn('Task was not found')\r\n\r\n    let model: TaskUpdateDomainType = {\r\n        status: task.status,\r\n        title: task.title,\r\n        description: task.description,\r\n        deadline: task.deadline,\r\n        startDate: task.startDate,\r\n        priority: task.priority,\r\n        ...updateObject\r\n    }\r\n    tasksAPI.updateTask(todolistId, taskId, model)\r\n        .then(res => res.data.resultCode === ApiResultCode.success\r\n                ? dispatch(updateTaskAC(taskId, todolistId, updateObject))\r\n                : handlerForAppErrorInThen(dispatch, res.data.messages))\r\n        .catch((err: AxiosError) => dispatch(changeAppErrorValue(err.message)))\r\n        .finally(()=> {\r\n            dispatch(changeAppLoadingStatus(RequestStatusType.succeeded))\r\n            dispatch(changeTaskEntityStatusAC(taskId, todolistId, RequestStatusType.succeeded))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string): AppThunk => dispatch => {\r\n    dispatch(changeAppLoadingStatus(RequestStatusType.loading))\r\n    dispatch(changeTaskEntityStatusAC(taskId, todolistId, RequestStatusType.loading))\r\n    tasksAPI.deleteTask(todolistId, taskId)\r\n        .then(res => res.data.resultCode === ApiResultCode.success\r\n                ? dispatch(removeTaskAC(taskId, todolistId))\r\n                : handlerForAppErrorInThen(dispatch, res.data.messages))\r\n        .catch((err: AxiosError) => dispatch(changeAppErrorValue(err.message)))\r\n        .finally(()=> dispatch(changeAppLoadingStatus(RequestStatusType.succeeded)))\r\n}\r\n\r\n// types\r\nexport type TasksPropsType = { [key: string]: TaskDomainType[] }\r\nexport type TasksActionTypes =\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof changeTaskEntityStatusAC>\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof clearTasksAC>\r\n    | SetTodolistsAT\r\n    | AddTodolistAT\r\n    | RemoveTodolistAT\r\n    | AppActionType\r\nexport type TaskUpdateDomainType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TaskDomainType = TaskType & {entityStatus: RequestStatusType}\r\n","import {AppThunk} from '../app/store';\r\nimport {changeAppErrorValue, changeAppLoadingStatus} from './app-reducer';\r\nimport {ApiResultCode, RequestStatusType} from '../utils/enums';\r\nimport {authAPI, LoginRequestType} from '../api/api';\r\nimport {handlerForAppErrorInThen} from '../utils/common-commands';\r\nimport {AxiosError} from 'axios';\r\nimport {clearTasksAC} from './reducer-tasks';\r\nimport {clearTodolistsAC} from './reducer-todolist';\r\n\r\nlet initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state: initialStateType = initialState, action: AuthActionType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'AUTH/SET-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.isLoggedIn}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setLoggedIn = (isLoggedIn: boolean) => ({type: 'AUTH/SET-LOGGED-IN', isLoggedIn} as const)\r\n\r\n// thunks\r\nexport const logInTC = (data: LoginRequestType): AppThunk => dispatch => {\r\n    dispatch(changeAppLoadingStatus(RequestStatusType.loading))\r\n    authAPI.login(data)\r\n        .then(res => res.data.resultCode === ApiResultCode.success\r\n            ? dispatch(setLoggedIn(true))\r\n            : handlerForAppErrorInThen(dispatch, res.data.messages))\r\n        .catch((err: AxiosError) => dispatch(changeAppErrorValue(err.message)))\r\n        .finally(()=> dispatch(changeAppLoadingStatus(RequestStatusType.succeeded)))\r\n}\r\nexport const logoutTC = (): AppThunk => dispatch => {\r\n    dispatch(changeAppLoadingStatus(RequestStatusType.loading))\r\n    authAPI.logout()\r\n        .then(res => {\r\n                if (res.data.resultCode === ApiResultCode.success) {\r\n                    dispatch(setLoggedIn(false))\r\n                    dispatch(clearTasksAC())\r\n                    dispatch(clearTodolistsAC())\r\n                } else handlerForAppErrorInThen(dispatch, res.data.messages)\r\n            }\r\n        )\r\n        .catch((err: AxiosError) => dispatch(changeAppErrorValue(err.message)))\r\n        .finally(()=> dispatch(changeAppLoadingStatus(RequestStatusType.succeeded)))\r\n}\r\n\r\n// types\r\nexport type AuthActionType = ReturnType<typeof setLoggedIn>\r\ntype initialStateType = typeof initialState","import {ApiResultCode, RequestStatusType} from '../utils/enums';\r\nimport {authAPI} from '../api/api';\r\nimport {AppThunk} from '../app/store';\r\nimport {AxiosError} from 'axios';\r\nimport {setLoggedIn} from './auth-reducer';\r\n\r\nlet initialState = {\r\n    loadingStatus: RequestStatusType.idle,\r\n    errorServer: null as NullPossibleType<string>,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: AppStateType = initialState, action: AppActionType): AppStateType => {\r\n    switch (action.type) {\r\n        case 'APP/CHANGE-STATUS':\r\n            return {...state, loadingStatus: action.loadingStatus}\r\n        case 'APP/CHANGE-ERROR-VALUE':\r\n            return {...state, errorServer: action.errorServer}\r\n        case 'APP/INITIALIZE':\r\n            return {...state, isInitialized: true}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const changeAppLoadingStatus = (loadingStatus: RequestStatusType) => ({type: 'APP/CHANGE-STATUS', loadingStatus} as const)\r\nexport const changeAppErrorValue = (errorServer: NullPossibleType<string>) => ({type: 'APP/CHANGE-ERROR-VALUE', errorServer} as const)\r\nexport const initializeApp = () => ({type: 'APP/INITIALIZE'} as const)\r\n\r\n// thunks\r\nexport const initializeAppTC = (): AppThunk => dispatch => {\r\n    authAPI.me()\r\n        .then(res => res.data.resultCode === ApiResultCode.success\r\n            ? dispatch(setLoggedIn(true))\r\n            : dispatch(setLoggedIn(false)))\r\n        .catch((err: AxiosError) => dispatch(changeAppErrorValue(err.message)))\r\n        .finally(() => dispatch(initializeApp()))\r\n}\r\n\r\n// types\r\nexport type NullPossibleType<T> = null | T\r\nexport type AppActionType = ReturnType<typeof changeAppLoadingStatus> | ReturnType<typeof changeAppErrorValue> | ReturnType<typeof initializeApp>\r\nexport type AppStateType = typeof initialState","import {todolistsAPI, TodolistType} from '../api/api';\r\nimport {AppActionType, changeAppErrorValue, changeAppLoadingStatus} from './app-reducer';\r\nimport {AxiosError} from 'axios';\r\nimport {ApiResultCode, RequestStatusType} from '../utils/enums';\r\nimport {AppThunk} from '../app/store';\r\nimport {setTasksTC} from './reducer-tasks';\r\n\r\nlet initialState: TodolistDomainType[] = []\r\n\r\nexport const todolistsReducer = (todolists: TodolistDomainType[] = initialState, action: TodolistActionTypes): TodolistDomainType[] => {\r\n    switch (action.type) {\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(t => ({...t, filter: 'All', entityStatus: RequestStatusType.idle}))\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'All', entityStatus: RequestStatusType.idle}, ...todolists]\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return todolists.map(mt => mt.id === action.todolistId ? {...mt, filter: action.filterId} : mt)\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return todolists.map(m => m.id === action.todolistId ? {...m, title: action.title} : m)\r\n        case 'REMOVE-TODOLIST':\r\n            return todolists.filter(ft => ft.id !== action.todolistId)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return todolists.map(t => t.id === action.todolistId ? {...t, entityStatus: action.entityStatus} : t)\r\n        case 'CLEAR-TODOLISTS':\r\n            return []\r\n        default:\r\n            return todolists\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setTodolistsAC = (todolists: TodolistType[]) => ({type: 'SET-TODOLISTS', todolists} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const filterTaskAC = (filterId: FilterProps, todolistId: string) => (\r\n    {type: 'CHANGE-TODOLIST-FILTER', todolistId, filterId} as const)\r\nexport const changeTodolistTitleAC = (title: string, todolistId: string) => (\r\n    {type: 'CHANGE-TODOLIST-TITLE', todolistId, title} as const)\r\nexport const removeTodolistAC = (todolistId: string) => ({type: 'REMOVE-TODOLIST', todolistId} as const)\r\nexport const changeTodolistEntityStatusAC = (todolistId: string, entityStatus: RequestStatusType) => ({type: 'CHANGE-TODOLIST-ENTITY-STATUS', todolistId, entityStatus} as const)\r\nexport const clearTodolistsAC = () => ({type: 'CLEAR-TODOLISTS'} as const)\r\n\r\n// thunks\r\nexport const setTodolistsTC = (): AppThunk => dispatch => {\r\n    dispatch(changeAppLoadingStatus(RequestStatusType.loading))\r\n    todolistsAPI.getTodolists()\r\n        .then(res => {\r\n            dispatch(setTodolistsAC(res.data))\r\n            return res.data\r\n        })\r\n        .then(todos => todos.forEach(todo => dispatch(setTasksTC(todo.id))))\r\n        .catch((err: AxiosError) => dispatch(changeAppErrorValue(err.message)))\r\n        .finally(()=> dispatch(changeAppLoadingStatus(RequestStatusType.succeeded)))\r\n}\r\nexport const addTodolistTC = (title: string): AppThunk => dispatch => {\r\n    dispatch(changeAppLoadingStatus(RequestStatusType.loading))\r\n    todolistsAPI.createTodolist(title)\r\n        .then(res => res.data.resultCode === ApiResultCode.success\r\n                ? dispatch(addTodolistAC(res.data.data.item))\r\n                : dispatch(changeAppErrorValue(res.data.messages ? res.data.messages[0] : 'Some error is occurred')))\r\n        .catch((err: AxiosError) => dispatch(changeAppErrorValue(err.message)))\r\n        .finally(()=> dispatch(changeAppLoadingStatus(RequestStatusType.succeeded)))\r\n}\r\nexport const changeTodolistTitleTC = (title: string, todolistId: string): AppThunk => dispatch => {\r\n    dispatch(changeAppLoadingStatus(RequestStatusType.loading))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, RequestStatusType.loading))\r\n    todolistsAPI.updateTodolist(todolistId, title)\r\n        .then(res => res.data.resultCode === ApiResultCode.success\r\n                ? dispatch(changeTodolistTitleAC(title, todolistId))\r\n                : dispatch(changeAppErrorValue(res.data.messages ? res.data.messages[0] : \"Some error is occurred\")))\r\n        .catch((err: AxiosError) => dispatch(changeAppErrorValue(err.message)))\r\n        .finally(()=> {\r\n            dispatch(changeAppLoadingStatus(RequestStatusType.succeeded))\r\n            dispatch(changeTodolistEntityStatusAC(todolistId, RequestStatusType.succeeded))\r\n        })\r\n}\r\nexport const removeTodolistTC = (todolistId: string): AppThunk => dispatch => {\r\n    dispatch(changeAppLoadingStatus(RequestStatusType.loading))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, RequestStatusType.loading))\r\n    todolistsAPI.deleteTodolist(todolistId)\r\n        .then(res => res.data.resultCode === ApiResultCode.success\r\n                ? dispatch(removeTodolistAC(todolistId))\r\n                : dispatch(changeAppErrorValue(res.data.messages ? res.data.messages[0] : \"Some error is occurred\")))\r\n        .catch((err: AxiosError) => dispatch(changeAppErrorValue(err.message)))\r\n        .finally(()=> dispatch(changeAppLoadingStatus(RequestStatusType.succeeded)))\r\n}\r\n\r\n// types\r\nexport type TodolistActionTypes =\r\n    | SetTodolistsAT\r\n    | AddTodolistAT\r\n    | ReturnType<typeof filterTaskAC>\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | RemoveTodolistAT\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n    | ReturnType<typeof clearTodolistsAC>\r\n    | AppActionType\r\n\r\nexport type SetTodolistsAT = ReturnType<typeof setTodolistsAC>\r\nexport type AddTodolistAT = ReturnType<typeof addTodolistAC>\r\nexport type RemoveTodolistAT = ReturnType<typeof removeTodolistAC>\r\n\r\nexport type FilterProps = 'All' | 'Active' | 'Completed'\r\nexport type TodolistDomainType = TodolistType & { filter: FilterProps, entityStatus: RequestStatusType }","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {TodolistActionTypes, todolistsReducer} from '../features/reducer-todolist';\r\nimport {TasksActionTypes, tasksReducer} from '../features/reducer-tasks';\r\nimport thunk, {ThunkAction} from 'redux-thunk';\r\nimport {TypedUseSelectorHook, useSelector} from 'react-redux';\r\nimport {AppActionType, appReducer} from '../features/app-reducer';\r\nimport {AuthActionType, authReducer} from '../features/auth-reducer';\r\n\r\nlet rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n\r\nexport let store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n// useSelectorWrapper - you don't need to write AppStateRootType while using useSelector\r\nexport const useCustomSelector: TypedUseSelectorHook<AppStateRootType> = useSelector\r\n\r\n// types\r\nexport type AppStateRootType = ReturnType<typeof rootReducer>\r\nexport type RootActionType = AppActionType | TasksActionTypes | TodolistActionTypes | AuthActionType\r\n// https://redux.js.org/usage/usage-with-typescript\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppStateRootType, unknown, RootActionType>\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React, {useCallback, useState} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport AddCircleTwoTone from '@mui/icons-material/AddCircleTwoTone';\r\n\r\nexport type AddItemFormPropsType = {\r\n    disable?: boolean\r\n    addItem: (inputTextValue: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo( ({disable = false, addItem}: AddItemFormPropsType) => {\r\n    console.log(\"AddItemForm\")\r\n\r\n    //Хуки React\r\n    let [inputTextValue, setInputTextValue] = useState('')\r\n    let [error, setError] = useState(false)\r\n\r\n    const onChangeHandler = useCallback( (value: string) => {\r\n        setInputTextValue(value)\r\n        setError(false)\r\n    }, [])\r\n\r\n    const onClickPressHandler = useCallback( (code: string) => {\r\n        if (code === \"Enter\" || code === \"NumpadEnter\") {\r\n            if (inputTextValue.trim() !== '') {\r\n                addItem(inputTextValue)\r\n                setInputTextValue('')\r\n            } else {\r\n                setError(true)\r\n            }\r\n        }\r\n    }, [inputTextValue, addItem])\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={'outlined'}\r\n                size={'small'}\r\n                value={inputTextValue}\r\n                onChange={(e) => onChangeHandler(e.currentTarget.value)}\r\n                onKeyPress={(e) => onClickPressHandler(e.code)}\r\n                label={'Title'}\r\n                error={error}\r\n                helperText={error && \"Title is a must\"}\r\n                style={{marginBottom: \"10px\"}}\r\n                disabled={disable}\r\n                />\r\n            <IconButton color={'primary'} onClick={() => onClickPressHandler(\"Enter\")} disabled={disable}>\r\n                <AddCircleTwoTone/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n} )","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react'\r\nimport TextField from '@mui/material/TextField';\r\nimport Typography from '@mui/material/Typography';\r\n\r\ntype EditableSpanPropsType = {\r\n    titleMain: string\r\n    completed: boolean\r\n    changedTitle: (title: string) => void\r\n    header: boolean\r\n    disable?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo( ({disable = false, header, completed, changedTitle, titleMain}: EditableSpanPropsType) => {\r\n    console.log(\"EditableSpan\")\r\n\r\n    //Хуки React\r\n    let [title, setTitle] = useState(titleMain)\r\n    let [inputActive, setInputActive] = useState(false)\r\n\r\n    const inputActiveOn = useCallback( () => !disable && setInputActive(true), [disable])\r\n    const onChangeHandler = useCallback( (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value), [])\r\n    const titleForToDolist = useCallback( () => {\r\n        setInputActive(false)\r\n        changedTitle(title)\r\n    }, [changedTitle, title])\r\n    const onKeyPressHandler = useCallback( (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') titleForToDolist()\r\n    }, [titleForToDolist])\r\n\r\n    const opacityAndBoldForTasks: any = header\r\n        ? {fontWeight: 'bold', fontSize: 'larger'}\r\n        : (completed ? {opacity: 0.35} : {opacity: 1})\r\n\r\n\r\n    return (\r\n        <div>\r\n            {inputActive\r\n                ? <TextField\r\n                    value={title}\r\n                    onChange={onChangeHandler}\r\n                    onBlur={titleForToDolist}\r\n                    onKeyPress={onKeyPressHandler}\r\n                    autoFocus\r\n                />\r\n                : <Typography onDoubleClick={inputActiveOn} style={opacityAndBoldForTasks}>\r\n                    {titleMain}\r\n                </Typography>\r\n            }\r\n\r\n        </div>\r\n    )\r\n} )","import React, {useCallback} from 'react';\r\nimport {removeTaskTC, TaskDomainType, updateTaskTC} from '../reducer-tasks';\r\nimport {EditableSpan} from '../../components/EditableSpan/EditableSpan';\r\nimport {useDispatch} from 'react-redux';\r\nimport {useCustomSelector} from '../../app/store';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport DeleteTwoTone from '@mui/icons-material/DeleteTwoTone';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {RequestStatusType, TaskStatuses} from '../../utils/enums';\r\n\r\n\r\ntype TaskPropsType = {\r\n    id: string\r\n    todolistId: string\r\n    disabled: boolean\r\n}\r\n\r\nexport const Task = React.memo( ({id, todolistId, disabled = false}: TaskPropsType) => {\r\n    console.log(\"Task\")\r\n\r\n    const task = useCustomSelector<TaskDomainType>(state => state.tasks[todolistId].filter(f => f.id === id)[0])\r\n    const dispatch = useDispatch()\r\n    let disable = disabled || task.entityStatus === RequestStatusType.loading\r\n\r\n    const changeTaskTitle = useCallback( (title: string) => dispatch(updateTaskTC(todolistId, task.id, {title})), [dispatch, todolistId, task.id])\r\n    const changeTaskCheckbox = useCallback( (taskId: string, event: boolean) => {\r\n        dispatch(updateTaskTC(todolistId, taskId, event ? {status: TaskStatuses.Completed} : {status: TaskStatuses.New}))\r\n    }, [dispatch, todolistId])\r\n    const removeTask = useCallback( (taskId: string) => dispatch(removeTaskTC(taskId, todolistId)), [dispatch, todolistId])\r\n\r\n    return (\r\n        <ListItem style={{padding: '0px'}}>\r\n            <IconButton onClick={() => removeTask(task.id)} size={'small'} disabled={disable}>\r\n                <DeleteTwoTone color={disable ? 'disabled' : 'secondary'}/>\r\n            </IconButton>\r\n            <Checkbox size={'small'} color={'primary'}\r\n                      onChange={(event) => changeTaskCheckbox(task.id, event.currentTarget.checked)}\r\n                      checked={task.status === TaskStatuses.Completed} disabled={disable}/>\r\n            <EditableSpan titleMain={task.title} changedTitle={changeTaskTitle} completed={task.status === TaskStatuses.Completed}\r\n                          header={false} disable={disable}/>\r\n        </ListItem>\r\n    )\r\n} )","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm';\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan';\r\nimport {useDispatch} from 'react-redux';\r\nimport {useCustomSelector} from '../../../app/store';\r\nimport {addTaskTC, TaskDomainType} from '../../reducer-tasks';\r\nimport {\r\n    changeTodolistTitleTC,\r\n    FilterProps,\r\n    filterTaskAC,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from '../../reducer-todolist';\r\nimport {Task} from '../../Task/Task';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport List from '@mui/material/List';\r\nimport DeleteForeverTwoTone from '@mui/icons-material/DeleteForeverTwoTone';\r\nimport {RequestStatusType, TaskStatuses} from '../../../utils/enums';\r\n\r\n\r\ntype TodolistPropsType = {todolistId: string, demo?: boolean}\r\n\r\nexport const Todolist = React.memo( ({todolistId, demo = false}: TodolistPropsType) => {\r\n    console.log(\"Todolist\")\r\n\r\n    useEffect(()=>{\r\n        if (demo) return\r\n        // eslint-disable-next-line\r\n    },[])\r\n\r\n    let dispatch = useDispatch()\r\n    let todolist = useCustomSelector<TodolistDomainType>(state => state.todolists.filter(f => f.id === todolistId)[0])\r\n    let tasks = useCustomSelector<TaskDomainType[]>(state => state.tasks[todolistId])\r\n    let disable = todolist.entityStatus === RequestStatusType.loading\r\n\r\n    //Фильтрация тасков\r\n    todolist.filter === 'Active'\r\n        ? tasks = tasks.filter(f => !(f.status === TaskStatuses.Completed))\r\n        :\r\n        todolist.filter === 'Completed'\r\n            ? tasks = tasks.filter(f => f.status === TaskStatuses.Completed)\r\n            : tasks = [...tasks]\r\n\r\n    //Работа с тасками\r\n    const addTask = useCallback( (title: string) => dispatch(addTaskTC(title, todolistId)), [dispatch, todolistId])\r\n    const filterTasks = useCallback( (filter: FilterProps) => dispatch(filterTaskAC(filter, todolistId)), [dispatch, todolistId])\r\n\r\n    // Работа с тудулистами\r\n    const removeTodolist = useCallback( () => dispatch(removeTodolistTC(todolistId)), [dispatch, todolistId])\r\n    const changeTodolistTitle = useCallback( (title: string) => dispatch(changeTodolistTitleTC(title, todolistId)), [dispatch, todolistId])\r\n\r\n    return (\r\n        <div>\r\n            <IconButton onClick={removeTodolist} disabled={disable}>\r\n                <DeleteForeverTwoTone color={disable ? 'disabled' : 'secondary'}/>\r\n            </IconButton>\r\n            <h3><EditableSpan changedTitle={changeTodolistTitle} titleMain={todolist.title} completed={false}\r\n                              header={true} disable={disable}/></h3>\r\n            <AddItemForm addItem={addTask} disable={disable}/>\r\n            <div>\r\n                <Button variant={'contained'} color={todolist.filter === 'All' ? 'primary' : 'inherit'} size={'small'}\r\n                        onClick={() => filterTasks('All')}>All</Button>\r\n                <Button variant={'contained'} color={todolist.filter === 'Active' ? 'primary' : 'inherit'}\r\n                        size={'small'}\r\n                        onClick={() => filterTasks('Active')} style={{margin: '0px 5px'}}>Active</Button>\r\n                <Button variant={'contained'} color={todolist.filter === 'Completed' ? 'primary' : 'inherit'}\r\n                        size={'small'} onClick={() => filterTasks('Completed')}>Completed</Button>\r\n            </div>\r\n            <List>\r\n                {tasks.map(mf => <Task key={mf.id} id={mf.id} todolistId={todolistId} disabled={disable}/>)}\r\n            </List>\r\n        </div>\r\n    )\r\n} )","import {AddItemForm} from '../../components/AddItemForm/AddItemForm';\r\nimport React, {useCallback, useEffect} from 'react';\r\nimport {addTodolistTC, setTodolistsTC} from '../reducer-todolist';\r\nimport {useDispatch} from 'react-redux';\r\nimport {useCustomSelector} from '../../app/store';\r\nimport {Todolist} from './Todolist/Todolist';\r\nimport Container from '@mui/material/Container';\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {useNavigate} from 'react-router-dom';\r\n\r\ntype TodolistsPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolists = React.memo(({demo = false}: TodolistsPropsType) => {\r\n    console.log(\"TodolistsList\")\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate()\r\n    const isLoggedIn = useCustomSelector<boolean>(state => state.auth.isLoggedIn)\r\n    const todolists = useCustomSelector<string[]>(state => state.todolists.map(m => m.id))\r\n\r\n    useEffect(() => {\r\n        if (demo) return\r\n        isLoggedIn\r\n            ? dispatch(setTodolistsTC())\r\n            : navigate('login')\r\n        // eslint-disable-next-line\r\n    }, [isLoggedIn])\r\n\r\n    const addTodolist = useCallback((title: string) => dispatch(addTodolistTC(title)), [dispatch])\r\n\r\n    return (\r\n        <Container maxWidth={'xl'}>\r\n            <Grid container style={{justifyContent: 'center', margin: '20px'}}>\r\n                <AddItemForm addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={3} style={{justifyContent: 'center'}}>\r\n                {todolists.map(mt => {\r\n                    return (\r\n                        <Grid item key={mt}>\r\n                            <Paper elevation={4} style={{padding: '15px'}}>\r\n                                <Todolist\r\n                                    todolistId={mt}\r\n                                    demo={demo}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    )\r\n                })}\r\n            </Grid>\r\n        </Container>\r\n    )\r\n})","import * as React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useCustomSelector} from '../../app/store';\r\nimport {changeAppErrorValue, NullPossibleType} from '../../features/app-reducer';\r\nimport {useDispatch} from 'react-redux';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport default function ErrorSnackbar() {\r\n    const error = useCustomSelector<NullPossibleType<string>>(state => state.app.errorServer)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') return;\r\n        dispatch(changeAppErrorValue(null))\r\n    };\r\n\r\n    return (\r\n            <Snackbar open={!!error} autoHideDuration={5000} onClose={handleClose} anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}>\r\n                <Alert onClose={handleClose} severity=\"warning\" sx={{ width: '100%' }}>{error}</Alert>\r\n            </Snackbar>\r\n    );\r\n}\r\n","import FormControl from '@mui/material/FormControl';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport Grid from '@mui/material/Grid';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch} from 'react-redux';\r\nimport {logInTC} from '../auth-reducer';\r\nimport {useCustomSelector} from '../../app/store';\r\nimport {Navigate} from 'react-router-dom';\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    let isLoggedIn = useCustomSelector<boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const validate = (values: ValidationDataType) => {\r\n        const errors: ValidationDataType = {};\r\n        if (!values.email) {\r\n            errors.email = 'Required';\r\n        } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n            errors.email = 'Invalid email address';\r\n        }\r\n        if (!values.password) {\r\n            errors.password = 'Required';\r\n        } else if (values.password.length < 5) {\r\n            errors.password = 'Must be 5 or more characters';\r\n        }\r\n        return errors;\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate,\r\n        onSubmit: values => {\r\n            dispatch(logInTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) return <Navigate to='/'/>\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'} rel=\"noreferrer\"> here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('email')}/>\r\n                        {formik.touched.email && formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')}/>\r\n                        {formik.touched.password && formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          control={<Checkbox {...formik.getFieldProps('rememberMe')}/>}/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n// types\r\nexport type ValidationDataType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n","export default __webpack_public_path__ + \"static/media/not_found_404.91b427fb.png\";","import styles from './Error404.module.css'\r\nimport not_found from '../../images/not_found_404.png'\r\n\r\nexport const Error404 = () => {\r\n    return <div className={styles.container}>\r\n        <div className={styles.image}>\r\n            <img src={not_found} alt=\"not_found_404\"/>\r\n        </div>\r\n    </div>\r\n}","import React, {useCallback, useEffect} from 'react';\nimport {Todolists} from '../features/TodolistsList/Todolists';\nimport AppBar from '@mui/material/AppBar';\nimport Button from '@mui/material/Button';\nimport Toolbar from '@mui/material/Toolbar';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\nimport Menu from '@mui/icons-material/Menu';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport {useCustomSelector} from './store';\nimport ErrorSnackbar from '../components/ErrorSnackbar/ErrorSnackbar';\nimport {RequestStatusType} from '../utils/enums';\nimport {Navigate, Route, Routes} from 'react-router-dom';\nimport {Login} from '../features/Login/Login';\nimport {Error404} from '../features/Error404/Error404';\nimport {AppStateType, initializeAppTC} from '../features/app-reducer';\nimport {useDispatch} from 'react-redux';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport {logoutTC} from '../features/auth-reducer';\n\ntype AppPropsType = {\n    demo?: boolean\n}\n\nexport const App = React.memo( ({demo = false}: AppPropsType) => {\n    console.log(\"App\")\n\n    const {loadingStatus, isInitialized} = useCustomSelector<AppStateType>(state => state.app)\n    const isLoggedIn = useCustomSelector<boolean>(state => state.auth.isLoggedIn)\n    const dispatch = useDispatch()\n\n    const logoutHandler = useCallback(() => dispatch(logoutTC()), [dispatch])\n\n    useEffect(()=> {\n        dispatch(initializeAppTC())\n        // eslint-disable-next-line\n    }, [])\n\n    if (!isInitialized) {\n        return <div style={{display: 'flex', justifyContent: 'center', alignItems: 'center', marginTop: 50}}>\n            <CircularProgress/>\n        </div>\n    }\n\n    return (\n        <div className=\"App\">\n            <AppBar position=\"sticky\">\n                <Toolbar style={{justifyContent: 'space-between'}}>\n                    <div style={{display: 'flex'}}>\n                        <IconButton edge={'start'} color={'inherit'}>\n                            <Menu/>\n                        </IconButton>\n                        <Typography variant={'h6'} style={{margin: 'auto'}}>\n                            Todolists\n                        </Typography>\n                    </div>\n                    <div>\n                        {isLoggedIn && <Button variant={'outlined'} color=\"inherit\" onClick={logoutHandler}>Logout</Button>}\n                    </div>\n                </Toolbar>\n            </AppBar>\n            {loadingStatus === RequestStatusType.loading && <LinearProgress color=\"success\"/>}\n\n            <Routes>\n                <Route path='/' element={<Todolists demo={demo}/>}></Route>\n                <Route path='login' element={<Login/>}></Route>\n                <Route path='*' element={<Navigate to='404'/>}></Route>\n                <Route path='404' element={<Error404/>}></Route>\n            </Routes>\n\n            <ErrorSnackbar/>\n        </div>\n    );\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {App} from './app/App';\nimport {HashRouter} from 'react-router-dom';\n\nReactDOM.render(<Provider store={store}>\n        <HashRouter>\n            <App/>\n        </HashRouter>\n    </Provider>, document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Error404_container__24TOz\"};"],"sourceRoot":""}