{"version":3,"sources":["reportWebVitals.ts","core/reducer-todolist.ts","core/reducer-tasks.ts","core/store/store.ts","Components/AddItemForm/AddItemForm.tsx","Components/EditableSpan/EditableSpan.tsx","Todolist.tsx","App.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","rootReducer","combineReducers","todolists","action","type","filter","ft","id","todolistId","title","map","m","mt","filterId","tasks","task","taskID","v1","term","isDone","checked","taskId","newState","store","createStore","window","AddItemForm","props","useState","inputTextValue","setInputTextValue","error","setError","onClickPressHandler","code","trim","addItem","TextField","variant","size","value","onChange","e","currentTarget","onKeyPress","label","helperText","style","marginBottom","IconButton","color","onClick","AddCircleTwoTone","EditableSpan","setTitle","inputActive","setInputActive","titleForToDolist","changedTitle","opacityAndBoldForTasks","header","fontWeight","fontSize","completed","opacity","onBlur","key","autoFocus","Typography","onDoubleClick","Todolist","dispatch","useDispatch","todolist","useSelector","state","f","filterTasks","DeleteForeverTwoTone","changeTodolistTitleAC","addTaskAC","Button","margin","List","mf","ListItem","padding","removeTask","DeleteTwoTone","Checkbox","event","changeCheckboxAC","changeTaskCheckbox","changedTitleTaskAC","App","todolistComponents","Grid","item","Paper","elevation","className","AppBar","position","Toolbar","justifyContent","edge","Menu","Container","maxWidth","container","addTodolistAC","spacing","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b9419513.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {FilterProps, todolistsPropsType} from '../App';\r\nimport {v1} from 'uuid';\r\n\r\nexport type removeTodolistAT = {\r\n    type: 'REMOVE-TODOLIST'\r\n    todolistId: string\r\n}\r\nexport type addTodolistAT = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type changeTodolistTitleAT = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    title: string,\r\n    todolistId: string\r\n}\r\nexport type filterTaskAT = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    filterId: FilterProps,\r\n    todolistId: string\r\n}\r\nexport type todolistActionTypes = removeTodolistAT | addTodolistAT | changeTodolistTitleAT | filterTaskAT\r\n\r\nlet initialState: todolistsPropsType[] = []\r\n\r\nexport const todolistsReducer = (todolists: todolistsPropsType[] = initialState, action: todolistActionTypes): todolistsPropsType[] => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return todolists.filter(ft => ft.id !== action.todolistId)\r\n        case 'ADD-TODOLIST':\r\n            return [...todolists, {id: action.todolistId, title: action.title, filter: 'All'}]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return todolists.map(m => m.id === action.todolistId ? {...m, title: action.title} : m)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return todolists.map(mt => mt.id === action.todolistId ? {...mt, filter: action.filterId} : mt)\r\n        default:\r\n            return todolists\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): removeTodolistAT => {\r\n    return {\r\n        type: 'REMOVE-TODOLIST',\r\n        todolistId: todolistId\r\n    }\r\n}\r\nexport const addTodolistAC = (title: string): addTodolistAT => {\r\n    return {\r\n        type: 'ADD-TODOLIST',\r\n        title,\r\n        todolistId: v1()\r\n    }\r\n}\r\nexport const changeTodolistTitleAC = (title: string, todolistId: string): changeTodolistTitleAT => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-TITLE',\r\n        todolistId: todolistId,\r\n        title\r\n    }\r\n}\r\nexport const filterTaskAC = (filterId: FilterProps, todolistId: string): filterTaskAT => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-FILTER',\r\n        todolistId,\r\n        filterId\r\n    }\r\n}","import {tasksPropsType} from '../App';\r\nimport {v1} from 'uuid';\r\nimport {addTodolistAT, removeTodolistAT} from './reducer-todolist';\r\n\r\nexport type removeTaskAT = {\r\n    type: 'REMOVE-TASK'\r\n    taskID: string\r\n    todolistId: string\r\n}\r\nexport type addTaskAT = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type changeCheckboxAT = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    id: string\r\n    checked: boolean\r\n    todolistId: string\r\n}\r\nexport type changedTitleTaskAT = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    title: string\r\n    todolistId: string\r\n    taskId: string\r\n}\r\nexport type tasksActionTypes = removeTaskAT | addTaskAT | changeCheckboxAT | changedTitleTaskAT | removeTodolistAT | addTodolistAT\r\n\r\nlet initialState: tasksPropsType = {}\r\n\r\nexport const tasksReducer = (tasks: tasksPropsType = initialState, action: tasksActionTypes): tasksPropsType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...tasks, [action.todolistId]: tasks[action.todolistId].filter(task => task.id !== action.taskID)}\r\n        case 'ADD-TASK':\r\n            return {...tasks, [action.todolistId]: [{id: v1(), term: action.title, isDone: false}, ...tasks[action.todolistId]]}\r\n        case 'CHANGE-TASK-STATUS':\r\n            return {...tasks, [action.todolistId]: tasks[action.todolistId].map(task => task.id === action.id ? {...task, isDone: action.checked} : task)}\r\n        case 'CHANGE-TASK-TITLE':\r\n            return {...tasks, [action.todolistId]: tasks[action.todolistId].map(task => task.id === action.taskId ? {...task, term: action.title} : task)}\r\n        case 'REMOVE-TODOLIST':\r\n            let newState = {...tasks}\r\n            delete newState[action.todolistId]\r\n            return newState\r\n        case 'ADD-TODOLIST':\r\n            return {[action.todolistId]: [], ...tasks}\r\n        default:\r\n            return tasks\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskID: string, todolistId: string): removeTaskAT => {\r\n    return {\r\n        type: 'REMOVE-TASK',\r\n        taskID,\r\n        todolistId: todolistId\r\n    }\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): addTaskAT => {\r\n    return {\r\n        type: 'ADD-TASK',\r\n        title,\r\n        todolistId: todolistId\r\n    }\r\n}\r\nexport const changeCheckboxAC = (id: string, checked: boolean, todolistId: string): changeCheckboxAT => {\r\n    return {\r\n        type: 'CHANGE-TASK-STATUS',\r\n        id,\r\n        checked,\r\n        todolistId: todolistId\r\n    }\r\n}\r\nexport const changedTitleTaskAC = (title: string, todolistId: string, taskId: string): changedTitleTaskAT => {\r\n    return {\r\n        type: 'CHANGE-TASK-TITLE',\r\n        title,\r\n        todolistId: todolistId,\r\n        taskId\r\n    }\r\n}","import {combineReducers, createStore} from 'redux';\r\nimport {todolistsReducer} from '../reducer-todolist';\r\nimport {tasksReducer} from '../reducer-tasks';\r\n\r\nexport type AppStateRootType = ReturnType<typeof rootReducer>\r\n\r\nlet rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer\r\n})\r\n\r\nexport let store = createStore(rootReducer)\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React, {useState} from 'react';\r\nimport {FilterProps} from '../../App';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddCircleTwoTone} from '@material-ui/icons';\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (inputTextValue: string) => void\r\n    filter: FilterProps\r\n}\r\n\r\nexport const AddItemForm = (props: AddItemFormPropsType) => {\r\n    //Хуки React\r\n    let [inputTextValue, setInputTextValue] = useState('')\r\n    let [error, setError] = useState(false)\r\n\r\n    const onChangeHandler = (value: string) => {\r\n        setInputTextValue(value)\r\n        setError(false)\r\n    }\r\n\r\n    const onClickPressHandler = (code: string) => {\r\n        if (code === \"Enter\" || code === \"NumpadEnter\") {\r\n            if (inputTextValue.trim() !== '') {\r\n                props.addItem(inputTextValue)\r\n                setInputTextValue('')\r\n            } else {\r\n                setError(true)\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={'outlined'}\r\n                size={'small'}\r\n                value={inputTextValue}\r\n                onChange={(e) => onChangeHandler(e.currentTarget.value)}\r\n                onKeyPress={(e) => onClickPressHandler(e.code)}\r\n                label={'Title'}\r\n                error={error}\r\n                helperText={error && \"Title is a must\"}\r\n                style={{marginBottom: \"10px\"}}\r\n                />\r\n            <IconButton color={'primary'} onClick={() => onClickPressHandler(\"Enter\")}>\r\n                <AddCircleTwoTone/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {TextField, Typography} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    completed: boolean\r\n    changedTitle: (title: string) => void\r\n    header: boolean\r\n}\r\n\r\nexport const EditableSpan = (props: EditableSpanPropsType) => {\r\n    //Хуки React\r\n    let [title, setTitle] = useState(props.title)\r\n    let [inputActive, setInputActive] = useState(false)\r\n\r\n    const inputActiveOn = () => setInputActive(true)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n    const titleForToDolist = () => {\r\n        setInputActive(false)\r\n        props.changedTitle(title)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') titleForToDolist()\r\n    }\r\n\r\n    const opacityAndBoldForTasks: any = props.header\r\n        ? {fontWeight: 'bold', fontSize: 'larger'}\r\n        : (props.completed ? {opacity: 0.35} : {opacity: 1})\r\n\r\n    return (\r\n        <div>\r\n            {inputActive\r\n                ? <TextField\r\n                    value={title}\r\n                    onChange={onChangeHandler}\r\n                    onBlur={titleForToDolist}\r\n                    onKeyPress={onKeyPressHandler}\r\n                    autoFocus\r\n                />\r\n                : <Typography onDoubleClick={inputActiveOn} style={opacityAndBoldForTasks}>\r\n                    {props.title}\r\n                </Typography>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}","import {Button, Checkbox, IconButton, List, ListItem} from '@material-ui/core';\r\nimport React, {ChangeEvent} from 'react';\r\nimport {FilterProps, taskPropsType, todolistsPropsType} from './App';\r\nimport {AddItemForm} from './Components/AddItemForm/AddItemForm';\r\nimport {EditableSpan} from './Components/EditableSpan/EditableSpan';\r\nimport {DeleteForeverTwoTone, DeleteTwoTone} from '@material-ui/icons';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStateRootType} from './core/store/store';\r\nimport {addTaskAC, changeCheckboxAC, changedTitleTaskAC, removeTaskAC} from './core/reducer-tasks';\r\nimport {changeTodolistTitleAC, filterTaskAC, removeTodolistAC} from './core/reducer-todolist';\r\n\r\ntype TodolistPropsType = {todolistId: string}\r\n\r\nexport const Todolist = (props: TodolistPropsType) => {\r\n    //Хуки react-redux\r\n    let dispatch = useDispatch()\r\n    let todolist = useSelector<AppStateRootType, todolistsPropsType>(state => state.todolists.filter(f => f.id === props.todolistId)[0])\r\n    let tasks = useSelector<AppStateRootType, taskPropsType[]>(state => state.tasks[props.todolistId])\r\n\r\n    //Фильтрация тасков\r\n    todolist.filter === 'Active'\r\n        ? tasks = tasks.filter(f => !f.isDone)\r\n        :\r\n        todolist.filter === 'Completed'\r\n            ? tasks = tasks.filter(f => f.isDone)\r\n            : tasks = [...tasks]\r\n\r\n    //Работа с тасками\r\n    const addTask = (title: string) => dispatch(addTaskAC(title, props.todolistId))\r\n    const changeTaskCheckbox = (id: string, event: ChangeEvent<HTMLInputElement>) => dispatch(changeCheckboxAC(id, event.currentTarget.checked, props.todolistId))\r\n    const filterTasks = (filter: FilterProps) => dispatch(filterTaskAC(filter, props.todolistId))\r\n    const removeTask = (id: string) => dispatch(removeTaskAC(id, props.todolistId))\r\n\r\n    // Работа с тудулистами\r\n    const removeTodolist = () => dispatch(removeTodolistAC(props.todolistId))\r\n    const changeTodolistTitle = (title: string) => dispatch(changeTodolistTitleAC(title, props.todolistId))\r\n\r\n    return (\r\n        <div>\r\n            <IconButton onClick={removeTodolist}>\r\n                <DeleteForeverTwoTone color={'secondary'}/>\r\n            </IconButton>\r\n            <h3><EditableSpan changedTitle={changeTodolistTitle} title={todolist.title} completed={false}\r\n                              header={true}/></h3>\r\n            <AddItemForm addItem={addTask} filter={todolist.filter}/>\r\n            <div>\r\n                <Button variant={'contained'} color={todolist.filter === 'All' ? 'primary' : 'inherit'} size={'small'}\r\n                        onClick={() => filterTasks('All')}>All</Button>\r\n                <Button variant={'contained'} color={todolist.filter === 'Active' ? 'primary' : 'inherit'}\r\n                        size={'small'}\r\n                        onClick={() => filterTasks('Active')} style={{margin: '0px 5px'}}>Active</Button>\r\n                <Button variant={'contained'} color={todolist.filter === 'Completed' ? 'primary' : 'inherit'}\r\n                        size={'small'} onClick={() => filterTasks('Completed')}>Completed</Button>\r\n            </div>\r\n            <List>\r\n                {tasks.map(mf => {\r\n                        const changedTitleTask = (title: string) => {\r\n                            dispatch(changedTitleTaskAC(title, props.todolistId, mf.id))\r\n                        }\r\n\r\n                        return (\r\n                            <ListItem key={mf.id} style={{padding: '0px'}}>\r\n                                <IconButton onClick={() => removeTask(mf.id)} size={'small'}>\r\n                                    <DeleteTwoTone color={'secondary'}/>\r\n                                </IconButton>\r\n                                <Checkbox size={'small'} color={'primary'}\r\n                                          onChange={(event) => changeTaskCheckbox(mf.id, event)} checked={mf.isDone}/>\r\n                                <EditableSpan title={mf.term} changedTitle={changedTitleTask} completed={mf.isDone}\r\n                                              header={false}/>\r\n                            </ListItem>\r\n                        )\r\n                    }\r\n                )\r\n                }\r\n            </List>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport {AddItemForm} from './Components/AddItemForm/AddItemForm';\nimport {Todolist} from './Todolist';\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\nimport {Menu} from '@material-ui/icons';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {addTodolistAC} from './core/reducer-todolist';\nimport {AppStateRootType} from './core/store/store';\n\nexport type FilterProps = 'All' | 'Active' | 'Completed'\nexport type todolistsPropsType = {\n    id: string\n    title: string\n    filter: FilterProps\n}\nexport type taskPropsType = {\n    id: string\n    term: string\n    isDone: boolean\n}\nexport type tasksPropsType = {\n    [key: string]: taskPropsType[]\n}\n\nexport function App() {\n    //Хуки React-Redux\n    let dispatch = useDispatch()\n    let todolists = useSelector<AppStateRootType, todolistsPropsType[]>(state => state.todolists)\n\n    //Добавление тудулиста\n    const addTodolist = (title: string) => dispatch(addTodolistAC(title))\n\n    //Отрисовка тудулистов\n    const todolistComponents = todolists.map(mt => {\n        return (\n            <Grid item key={mt.id}>\n                <Paper elevation={4} style={{padding: '15px'}}>\n                    <Todolist\n                        key={mt.id}\n                        todolistId={mt.id}\n                    />\n                </Paper>\n            </Grid>\n        )\n    })\n\n    return (\n        <div className=\"App\">\n            <AppBar position=\"sticky\">\n                <Toolbar style={{justifyContent: 'space-between'}}>\n                    <IconButton edge={'start'} color={'inherit'}>\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant={'h6'}>\n                        Todolists\n                    </Typography>\n                    <Button variant={'outlined'} color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n            <Container maxWidth={'xl'}>\n                <Grid container style={{justifyContent: 'center', margin: '20px'}}>\n                    <AddItemForm addItem={addTodolist} filter={'All'}/>\n                </Grid>\n                <Grid container spacing={3} style={{justifyContent: 'center'}}>\n                    {todolistComponents}\n                </Grid>\n            </Container>\n        </div>\n    );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from './core/store/store';\nimport {App} from './App';\n\nReactDOM.render(<Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}